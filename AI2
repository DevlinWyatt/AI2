/*
 * This AI program is an improvment on the first.
 */
package ai2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.Random;
import toolbox.*;


/**
 * @author Devlin Wyatt
 */
public class AI2 {

    //Variables created by UserInput.
    public static String userInput;
    private static int avgWordSize;
    private static int maxWordSize;

    //This array stores the frequency of letters used.
    private static final int[] letterCount = new int[26];

    public static void main(String[] args) throws IOException {

        UserInput();
        System.out.println(AiString());
    }

    //This method deconstructs the user's String.
    public static void UserInput() {
        // User input String.
        userInput = "two word minimum";

        //Converts userInput to lower case for ease of use.
        userInput = userInput.toLowerCase();

        int currentWord = 0;
        int letterCount = 0;
        int wordCount = 0;

        try {

            //Initiallizes letterCount by adding 1 to each element.
            for (int i = 0; i < 26; i++) {
                AI2.letterCount[i]++;
            }

            //Checks every character for variety.
            for (int i = 0; i < userInput.length(); i++) {
                char currentChar = userInput.charAt(i);

                // Counts characters from a to z.
                if (currentChar >= 97 && currentChar <= 122) {
                    letterCount++;
                    currentWord++;
                    AI2.letterCount[userInput.charAt(i) - 97]++;

                }

                // Counts spaces for words and finds the max word size.
                if (currentChar == ' ' || (i + 1) == userInput.length()) {
                    wordCount++;
                    if (currentWord > maxWordSize) {
                        maxWordSize = currentWord;
                    }
                    currentWord = 0;
                }
            }

            //Calculates the average word size.
            avgWordSize = letterCount / wordCount;

            /*
            //Prints out the useful information
            System.out.println("userInput = " + userInput);
            System.out.println("wordCount = " + wordCount);
            System.out.println("AvgWordSize = " + avgWordSize);
            System.out.println("maxWordSize = " + maxWordSize);
            System.out.println("AiWordLength: " + AiWordLength());
            System.out.println("AiCharStats: " + AiCharStats());

            /*
            for (int i = 0; i < 26; i++) {
                System.out.printf("%c : %d\n", (i + 97), letterCount[i]);
            }
             */
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    //This method will return the Ai's word length
    public static int AiWordLength() {

        int topRank;
        int totalRank = 0;
        topRank = maxWordSize - avgWordSize + 1;

        //Min to max word range
        int[] rank = new int[maxWordSize];
        int[] rankPercent = new int[maxWordSize];

        //Associates the word size with its rank and finds the sum of all ranks.
        for (int i = 0; i < rank.length; i++) {
            rank[i] = topRank - Math.abs(avgWordSize - i - 1);
            totalRank += rank[i];
        }

        //Converts rank into % likelyhood
        for (int i = 0; i < rankPercent.length; i++) {
            rankPercent[i] = rank[i] * 1000 / totalRank;
        }

        //Stacks the percentages to add up to 1000%
        int[] percentStack = new int[maxWordSize];
        percentStack[0] = rankPercent[0];
        for (int i = 1; i < percentStack.length; i++) {
            percentStack[i] = percentStack[i - 1] + rankPercent[i];
        }

        /*
        //Displays useful information about the rank percent.
        for (int i = 0; i < rankPercent.length; i++) {
            System.out.println("rankPercent " + (i+1) + " : " + rankPercent[i]);
        }
         */
        //Randomizer to pick the word size based on probability
        Random random = new Random();
        int pickWordSize = random.nextInt(1000);
        for (int i = 0; i < maxWordSize; i++) {
            if (pickWordSize <= percentStack[i]) {
                return (i + 1);
            }
        }
        return avgWordSize;
    }

    //Returns a character based on probability
    public static char AiCharStats() {

        int rank = 0;
        Random random = new Random();

        //rank = the sum of every element in the count array.
        for (int i = 0; i < letterCount.length; i++) {
            rank = rank + letterCount[i];
        }
        //Array creates a percent rank for each letter
        int[] rankPercent = new int[26];
        for (int i = 0; i < letterCount.length; i++) {
            rankPercent[i] = letterCount[i] * 10000 / rank;
        }

        //Stacks the percentages to add up to 10000%
        int[] percentStack = new int[26];
        percentStack[0] = rankPercent[0];
        for (int i = 1; i < letterCount.length; i++) {
            percentStack[i] = percentStack[i - 1] + rankPercent[i];
        }
        /*
        //Displays useful information about the rank percent.
        for (int i = 0; i < rankPercent.length; i++) {
            System.out.printf("rankPercent %c : %d\n", (char) (i + 97), rankPercent[i]);
        }*/

        //Randomizer to pick the letter based on probability
        int pickChar = random.nextInt(10000);
        for (int i = 0; i < letterCount.length; i++) {
            if (pickChar <= percentStack[i]) {
                char probableChar = (char) (i + 97); //Converts int to char
                return (probableChar);
            }
        }
        return (char) (random.nextInt(26) + 97);
    }

    //This method creates a string of words
    public static String AiString() throws IOException {

        String aiString = "";
        int aiStringLength = 0;

        File file = new File("C:\\Users\\devli\\OneDrive\\Documents\\NetBeansProjects\\AI2\\build\\classes\\ai2\\3000-Common-Words.txt");        
        Initialize wL = new Initialize();
        String [] wordList = wL.Initialization(file);

        //Creates the ai string
        while (aiStringLength < userInput.length()) {

            String aiWord;
            String wordCheck = "";

            //Creates a word. 
            int thisWordLength = AiWordLength();
            do {
                char[] charArray = new char[thisWordLength];
                for (int i = 0; i < charArray.length; i++) {
                    charArray[i] = AiCharStats();
                }
                aiWord = new String(charArray); //Converts charArray to a String

                //Opens and reads the Dictionary
                for (int i = 0; i < wordList.length; i++) {

                    wordCheck = wordList[i];

                    if (wordCheck.equalsIgnoreCase(aiWord)) {//Stops dictionary if word is found

                        aiString = aiString + aiWord + " "; //Combines the Strings
                        aiStringLength = aiStringLength + thisWordLength;//Tracks the string length

                        break;
                    }
                }
            } while (!wordCheck.equalsIgnoreCase(aiWord));

        }
        return aiString;
    }
}
